<!DOCTYPE html>
<html>
   <head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <script type="text/javascript" src="https://rise.mpiwg-berlin.mpg.de/jslib/rise_client.js"></script>
      <script src="./js/jquery.min.js"></script>
      <script src="./js/FileSaver.min.js"></script>
      <script src="./js/jquery-ui.min.js"></script>
      <script src="./js/jquery.csv.js"></script>
   
      <script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/xmlwriter@1.0.2/XMLWriter.min.js"></script>
      <link href="./js/jquery-ui.min.css" rel="stylesheet">
      <script src="https://docusky.org.tw/DocuSky/js.ui/docusky.ui.manageDbListSimpleUI.js"></script>
      <style id="dsw-simplecomboui">
      div.dsw-container { position:absolute; border:#4F4F4F solid 3px; background-color:#EFEFEF; border-radius:4px; display:inline-block; font-family: "Arial","MingLiU"; font-size: 16px; z-index:1001 }div.dsw-titleBar { background-color:#4F4F4F; color:white; z-index:1001; padding: 6px; line-height: 16px; }div.dsw-containerContent { padding: 6px; overflow-x:hidden; overflow-y:auto; font-size:medium; z-index:1001 }.dsw-titleBar table,.dsw-containerContent table { width: 100%; line-height:1.3em; border-collapse: collapse; border-spacing:0; }table.dsw-tableDbCorpuslist { width:100%; margin-right: 16px; border-collapse: collapse; border-spacing: 0; font-size:medium; line-height:1.3em; color:#2F2F3F; }tr.dsw-tr-dbcorpuslist:nth-child(even) { background: #DFDFDF; line-height:1.3em; }tr.dsw-tr-dbcorpuslist:nth-child(odd)  { background: #FFFFFF; line-height:1.3em; }.dsw-titleContainer { width: 60%; padding: 0; }.dsw-closeContainer { position: relative; text-align: right; direction: rtl; padding: 0; }.dsw-titlename { display: inline-block; line-height: 16px; white-space: nowrap; }.dsw-btn-docusky { position: absolute; color:#2F2F2F; background-color:#EFEFEF; border-radius: 3px; font-size: 0.75rem; line-height: 0.75rem; padding: 4px; margin: 0 24px 0 0; cursor: pointer; }.dsw-btn-docusky:hover { background-color:#BFBFBF; color:#96438A; }.dsw-btn-docusky:active { background-color:#BFBFBF; color:#96438A; }.dsw-btn-close { display: inline-block; line-height: 16px; cursor: pointer; }.dsw-btn-close:hover { background-color:#BFBFBF; color:#96438A; }.dsw-btn-close:active { background-color:#BFBFBF; color:#96438A; }.dsw-td-dbcorpuslist { vertical-align: middle; padding: 0.25rem;}.dsw-td-dbcorpuslist-num { text-align: right;}.dsw-displaynameContainer { display: inline-block; width: 50px; white-space: nowrap; overflow: visible; margin: 0 72px 0 0; }.dsw-displayname { display: inline-block; direction: ltr; }.dsw-btn-logout { position: absolute; right: 0; top: -2px; color:#2F2F2F; background-color:#EFEFEF; border-radius: 3px; font-size: 0.75rem; line-height: 0.75rem; padding: 4px; margin: 0 24px 0 0; cursor: pointer; }.dsw-btn-logout:hover { background-color:#BFBFBF; color:#96438A; }.dsw-btn-logout:active { background-color:#BFBFBF; color:#96438A; }.dsw-overlay { display: none; position: absolute; background-color: #AAAAAA; opacity: 0.5; z-index: 1002; height: 100%; width: 100%; }input[type="text"].dsw-userinput,input[type="password"].dsw-userinput { box-sizing: content-box; padding: 2px 8px; border: 1px solid grey; border-radius: 2px; font-size: 14px; height: 20px; width: 150px; }.dsw-td-dslogin { padding: 0; height: 1.75rem; vertical-align: middle; }.dsw-logintitle { padding-right: 6px; }.dsw-loginsubmit { direction: rtl; }.dsw-loginmsg { padding: 0; color: red; font-size: 12px; font-weight: bold; }table.dsw-filenameList { width: 100%; margin-right: 16px; border-collapse: collapse; border-spacing: 0; line-height: 1.25; }.dsw-filenameList td { padding: 0.25rem; vertical-align: top; white-space: nowrap; }.dsw-filenameList-id { text-align: right; }.dsw-filename-download,.dsw-filename.delete { text-align: center; }.dsw-filenameList-category,.dsw-filenameList-path { text-align: left; overflow-x: hidden; text-overflow: ellipsis; }.dsw-filenameList-id {}.dsw-filenameList-download,.dsw-filenameList-delete { width: 45px; max-width: 45px; text-align: center; }.dsw-filenameList-category { font-weight: bold; min-width: 120px; max-width: 150px; }.dsw-filenameList-path { min-width: 450px; max-width: 550px; }.table.dsw-uploadfile{ width: 100%; border-collapse: collapse; border-spacing: 0; }.dsw-uploadfile td { padding: 0; }.dsw-td-dbList { padding: 0.25rem; }.dsw-td-dbList-dbname,.dsw-td-dbList-corpusnames{ text-align:left; border:1px solid #5C5C5C; }.dsw-td-dbList-delete{ text-align: center;  border:1px solid #5C5C5C; }.dsw-td-dbList-dbname{ font-weight:600; min-width: 100px; max-width:180px; word-wrap: break-word; word-break: break-all; }.dsw-td-dbList-corpusnames{ min-width: 450px; max-width: 550px; }.dsw-td-dbList-delete{ min-width:40px; max-width: 60px; white-space: nowrap; }.dsw-dbList-corpusnames-corpusname { display: inline-block; vertical-align: middle; white-space: nowrap; max-width: 250px; overflow-x: hidden; text-overflow: ellipsis; }.dsw-uploadprogressbar { display: none; box-sizing: border-box; height: 20px; width: 100%; margin: 0; padding: 0; border: 1px solid #515F6B; border-radius: 3px; overflow: hidden; background-color: #AFB9C3; }.dsw-uploadprogressbar-progress { display: block; height: 100%; margin: 0; padding: 0; border: 0; background-color: #4C93D4; text-align: center; color: white; white-space: nowrap; }.dsw-dbClick { cursor:pointer; text-decoration:underline; color:blue; }.dsw-corpusAttCntClick { cursor:pointer; text-decoration:underline; color:blue; }.dsw-corpusClick { cursor:pointer; text-decoration:underline; color:blue; }.dsw-attCntClick { cursor:pointer; text-decoration:underline; color:blue; }</style>
      <script>

         window.addEventListener('load', function () {


         function escapeHtml(unsafe) {
            return unsafe
                  .replace(/&/g, "&amp;");
         }

            DocuSkyObj = docuskyManageDbListSimpleUI;
            $(document).on('click','#manageDbList',function(e){
               DocuSkyObj.manageDbList(e);
            });
            
            Vue.component('selectCollection', {
               template: `<select v-bind:value="value" @input="$emit('input', $event.target.value)"><option value='0'>Filter by Collection</option><option v-for="collection in collections" v-bind:value="collection.uuid">{{ collection["name"] }}</option></select>`,
               props: {
                  value: String,
                  collections: Array
                  
               },
               watch: {
		            value: function(newValue){
			            this.currentOption = newValue;
		            }
	            }
            });

            Vue.component('progressBar', {
               template: `<div class='progress-bar-outer' v-if='progress > 1'><div class='progress-bar-inner' v-bind:style="{ width: progress + '%' }"></div></div>`,
               computed: {
                  progress(){
                     if(this.goal == 0) {
                        return 0;
                     }
                     return Math.ceil((this.current/this.goal) * 100);
                  }
               },
               
               props: {
                  'current': Number,
                  'goal': Number
               
               },
               watch: {
		            value: function(newValue){
			            this.currentOption = newValue;
		            }
	            }
            });

            var app = new Vue({
               el: '#app',
               data() {
                  return {
                     collections: [],
                     selectedCollection: '0',
                     resourceSearchString: '',
                     filename: 'DefaultXML',
                     resources: [],
                     selectedResources: [],
                     resourcesForExport: [],
                     currentPage: 1,
                     totalResources: 0,
                     perPage: 25,
                     filter: ""
                  }
               },
               watch: {
                  selectedCollection: function(uuid, oldUuid) {
                     this.currentPage = 1;
                     this.filter = '';
                     this.getResources(uuid,this.currentPage, '');
                  },
                  filter: function(filterValue, oldUuid) {
                     this.currentPage = 1;
                     this.getResources(this.selectedCollection,this.currentPage, filterValue);
                  }
               },
               computed: {
                  pageCount(){
                     return Math.ceil(this.totalResources/this.perPage);
                  },
                  selectedResourcesCount(){
                     return this.selectedResources.length;
                  },
                  resourcesForExportCount(){
                     return this.resourcesForExport.length;
                  },
                  currentCollectionName(){
                     getCollectionName(this.selectedCollection.uuid);
                  }
               },
               created(){
                  rise.init.setRemote();
                  this.getCollections();
                  this.getResources();

               },
               methods: {
                  getCollectionName(uuid){
                     const el =  this.collections.find(c => c.uuid==uuid)
                     if(el){
                        return el.name
                     }
                  },
                  removeSelectedResource(index) {
                    this.selectedResources.splice(index, 1);
                  },
                  async getCollections() {
                     rise.collections.all({per_page: 6000})
                        .then(response => {
                        this.collections = response.body;
                     })
                     .catch(error => {
                       console.log(error.response.body);
                       console.log(error.status);
                     })
                  },
                  reInit(){
                     this.selectedResources = [];
                     this.resourcesForExport = [];
                     this.selectedCollection = '0';
                     this.resources = [];
                     this.filter = '';
                  },
                  buildXML(resources){
                     var xw = new XMLWriter('UTF-8');
                     xw.formatting = 'indented';
                     xw.indentChar = ' ';
                     xw.indentation = 2;

                     xw.writeStartDocument( );
                     //xw.writeDocType('xml version="1.0"');
                        xw.writeStartElement( 'ThdlPrototypeExport' );
                           xw.writeStartElement( 'documents' );
                              for(const resource of resources ) {
                                 xw.writeComment('document');
                                 xw.writeStartElement('document');
                                    xw.writeElementString('corpus', this.getCollectionName(resource.collectionUuid));
                                    xw.writeAttributeString( 'filename', resource['name']);
                                    xw.writeStartElement('doc_content');
                                    for(const section of resource['sections']){
                                       for(const content_unit of section['content_units']) {
                                          xw.writeElementString('paragraph', escapeHtml(content_unit['content']));
                                       }
                                    }
                                    xw.writeEndElement();
                                 xw.writeEndElement();
                              }
                           xw.writeEndElement();
                     xw.writeEndElement();
                     xw.writeEndDocument();
                     var xml = xw.flush();
                     xw.close();
                     var blob = new Blob([xml], {type: "text/plain;charset=utf-8"});
                     var filename = this.filename;
                     if(filename == '') {
                        filename = "DefaultXML";
                     }
                     saveAs(blob, filename + '.xml');
                     this.reInit();      
                  },
                  async buildJson() {
                     var promises = [];
                     var tempResources = [];
                     for(const resource of this.selectedResources) {
                        resourceForExport = { ...resource, sections: [] };
                        promises.push(await rise.resources.sections(resource.uuid, {per_page: 6000}).then(response => {
                           resourceForExport['sections'] = response.body;
                           tempResources.push(resourceForExport);
                        }));
                     }
                     await Promise.all(promises);
                     promises = [];
                     for(const resource of tempResources) {
                        resourceMap = { ...resource, sections: [] };
                        for(const section of resource['sections']) {
                           tempSection = {};
                           tempSection['name'] = section['name'];
                           tempSection['uuid'] = section['uuid'];
                           tempSection['content_units'] = [];
                           promises.push(
                              await rise.sections.contentUnits(section.uuid, {per_page: 6000})
                              .then(response => {
                                 tempSection['content_units'] = response.body;
                                 resourceMap['sections'].push(tempSection);
                              })
                           );
                        }
                        this.resourcesForExport.push(resourceMap);
                     }
                     await Promise.all(promises);
                     this.buildXML(this.resourcesForExport);
                  },
                  nextPage() {
                     this.currentPage += 1;
                     this.getResources(this.selectedCollection, this.currentPage);
                  },
                  prevPage() {
                     this.currentPage -= 1;
                     this.getResources(this.selectedCollection, this.currentPage);
                  },
                  getResources(uuid = '', page, filter) {
                     this.resources = [];

                     if (uuid == 0) {
                        rise.resources.all({filter: this.filter, page: page}).then(response => {
                           this.resources = response.body;
                           this.totalResources = response.headers['x-total'];
                        })
                        return;
                     }
                     rise.collections.resources(uuid, {page: page, filter: filter})
                        .then(response => {
                           resources = response.body;
                           for(const resource of resources) {
                              var tempResource = {...resource, collectionUuid: this.selectedCollection};
                              this.resources.push(tempResource);
                           }
                           this.totalResources = response.headers['x-total'];
                        })
                        .catch(error => {
                           console.log(error.response.body);
                           console.log(error.status);
                        })
                  }
               }
            });
         })
      </script>   
      <style type="text/css">
         [v-cloak] {display: none}
         body { font-family: Verdana, Arial, Helvetica, sans-serif, times, 'Microsoft JhengHei', Heiti TC, PMingLiU, 'PMingLiu-ExtB', SimSun, SimSun-ExtB, HanaMinA, HanaMinB;
               margin:0; line-height:160%; }
         div.headerBar { background-color:rgb(41,60,65); color:white; padding:8px; text-align: center; }
         table.headerBar { color:rgb(205,174,94); }
         div.contentArea { padding: 12px; }
         table.selectTexts { padding:5px; border:3px solid rgb(180,123,47); background-color:rgb(180,123,47); border-radius:5px; }
         span.butBuildDb { padding:5px; background-color:rgb(122,23,30); color:rgb(205,174,94); 
                           border-radius:3px; cursor:pointer; }
         div.sampleFilesArea { padding:6px; border:3px solid rgb(180,123,47); background-color:rgb(180,123,47); border-radius:4px; }
         a:visited, a:link { color:rgb(122,23,30); }
         a.topAnchor:visited, a.topAnchor:link { color:rgb(225,225,225); cursor:pointer; }
         span.topAnchorSeparator { color:rgb(225,225,225); }
         textarea { resize:none; background-color:rgb(205,174,94); border:2px solid rgb(126,102,80); }
         input#selectInFile { background-color:rgb(180,123,47); }
         span.bookTitle { font-size:80%; margin:10px; padding:6px; margin-bottom:20px; page-break-inside:avoid;  }
         
         td.textTitles:nth-child(2n) { background-color:#DFDFFF; }
         td.textTitles:nth-child(2n+1) { background-color:#DFFFDF; }
         span.selectedBook { font-size:80%; margin:2px; padding:2px; border:1px solid black; }

         .remove-button {
            margin: 1px;
         }


         .progress-bar-outer {
            margin-top: 8px;
            height: 8px;
            background: #4C93D4;
            width: 50%;
         }

         .progress-bar-inner {
            height: 8px;
            background: #96438A;
            width: 0%;
         }
         
         .linear-gradient-headerBar {
            background-color: rgb(41,60,65);
            background-image: -webkit-linear-gradient(left, #778899, rgba(41,60,65,0.8));
            background-image: -moz-linear-gradient(left, #778899, rgba(41,60,65,0.8));
            background-image: -o-linear-gradient(left, #778899, rgba(41,60,65,0.8));
            background-image: -ms-linear-gradient(left, #778899, rgba(41,60,65,0.8));
            background-image: linear-gradient(to left, #778899, rgba(41,60,65,0.8));
         }
         
         .linear-gradient-InputSelection {
            background-color: rgb(180,123,47);
            background: radial-gradient(rgb(205,174,94,0.9), rgba(205,174,94,0.1));
         }

         #pagination-filter{
            width:100%;margin-left:3px;
         }

         .paginationContainer {
            float: right;
         }

         .paginationInfo {
            float: right;
         }

         .pagination ul {
            margin-top: 0px!important;
         }

         .pagination ul li {
            display: inline-block;
            float: left;
            margin: 0 5px 0 0;
         }
         
   </style>
   </head>
   <body cz-shortcut-listen="true">
      <svg style="position: absolute; width: 0; height: 0; overflow: hidden;" xmlns="http://www.w3.org/2000/svg">
         <symbol id="rise-logo" viewbox="0 0 684 178">
            <path style="fill:#ff4e7b;" d="M535.355796,159 L535.355796,75 C535.355796,64.5065898 543.862385,56 554.355796,56 C564.849206,56 573.355796,64.5065898 573.355796,75 L573.355796,140 L664.355796,140 C674.849206,140 683.355796,148.50659 683.355796,159 C683.355796,169.49341 674.849206,178 664.355796,178 L554.355796,178 C543.862385,178 535.355796,169.49341 535.355796,159 Z M99.3557956,60 C105.430928,60 110.355796,55.0751322 110.355796,49 C110.355796,42.9248678 105.430928,38 99.3557956,38 L19.3557956,38 C8.86238533,38 0.355795579,29.4934102 0.355795579,19 C0.355795579,8.50658975 8.86238533,0 19.3557956,0 L99.3557956,0 C126.417748,0 148.355796,21.9380473 148.355796,49 C148.355796,72.3644807 132.003001,91.9095617 110.118371,96.814285 C109.064839,97.0503997 107.371927,97.2525856 106.293963,97.4196354 C107.366123,98.0361532 108.38227,99.3686325 109.113144,100.343131 C116.989289,110.844658 128.803506,126.596947 144.555796,147.6 C150.851842,155.994728 149.150524,167.903954 140.755796,174.2 C132.361067,180.496046 120.451842,178.794728 114.155796,170.4 L54.27095,90.5535393 C53.0019302,88.8991381 51.9989394,87.0299624 51.3259228,85.0099575 C50.6751041,82.9914848 50.3557956,81.0330316 50.3557956,79 C50.3557956,78.6669875 50.3643629,78.335976 50.3812891,78.0071738 C50.5185509,75.4101939 51.185735,72.850111 52.3579614,70.5010829 C53.533848,68.1538849 55.1816039,66.0840879 57.1768307,64.4160905 C57.4297167,64.2052683 57.6893856,63.9998075 57.9557956,63.8 C59.6360719,62.5397927 61.4571511,61.5999873 63.345838,60.9701273 C65.491477,60.2776972 67.5253389,59.9781022 69.5477197,60 L99.3557956,60 Z M412.355796,140 C423.953775,140 433.355796,130.59798 433.355796,119 C433.355796,107.40202 423.953775,98 412.355796,98 C401.862385,98 393.355796,89.4934102 393.355796,79 C393.355796,68.5065898 401.862385,60 412.355796,60 C444.940596,60 471.355796,86.4151998 471.355796,119 C471.355796,151.5848 444.940596,178 412.355796,178 L332.355796,178 C321.862385,178 313.355796,169.49341 313.355796,159 C313.355796,148.50659 321.862385,140 332.355796,140 L412.355796,140 Z M362.355796,0 L442.355796,0 C452.849206,0 461.355796,8.50658975 461.355796,19 C461.355796,29.4934102 452.849206,38 442.355796,38 L362.355796,38 C356.280663,38 351.355796,42.9248678 351.355796,49 C351.355796,55.0751322 356.280663,60 362.355796,60 C372.849206,60 381.355796,68.5065898 381.355796,79 C381.355796,89.4934102 372.849206,98 362.355796,98 C335.293843,98 313.355796,76.0619527 313.355796,49 C313.355796,21.9380473 335.293843,0 362.355796,0 Z M0.355795579,75 C0.355795579,64.5065898 8.86238533,56 19.3557956,56 C29.8492058,56 38.3557956,64.5065898 38.3557956,75 L38.3557956,159 C38.3557956,169.49341 29.8492058,178 19.3557956,178 C8.86238533,178 0.355795579,169.49341 0.355795579,159 L0.355795579,75 Z M213.355796,19 C213.355796,8.50658975 221.862385,0 232.355796,0 C242.849206,0 251.355796,8.50658975 251.355796,19 L251.355796,159 C251.355796,169.49341 242.849206,178 232.355796,178 C221.862385,178 213.355796,169.49341 213.355796,159 L213.355796,19 Z M554.355796,38 C543.862385,38 535.355796,29.4934102 535.355796,19 C535.355796,8.50658975 543.862385,0 554.355796,0 L664.355796,0 C674.849206,0 683.355796,8.50658975 683.355796,19 C683.355796,29.4934102 674.849206,38 664.355796,38 L554.355796,38 Z M604.355796,98 C593.862385,98 585.355796,89.4934102 585.355796,79 C585.355796,68.5065898 593.862385,60 604.355796,60 L664.355796,60 C674.849206,60 683.355796,68.5065898 683.355796,79 C683.355796,89.4934102 674.849206,98 664.355796,98 L604.355796,98 Z"></path>
         </symbol>
      </svg>
      <div id="app">
      <div id="headerBar" class="headerBar linear-gradient-headerBar">
         <table class="headerBar" width="100%">
         <tbody>
               <tr>
                  <td width="120" style="font-size:120%"><b>DocuSky</b><span style="font-size:60%;vertical-align:sub">BETA</span></td>
                  <td><span style="font-size:110%">從 RISE 下載全文，組成 DocuXml 並可上載建庫的小工具</span></td>
                  <td align="right">
                  <a class="topAnchor" href="http://docusky.org.tw/DocuSky/">首頁</a> 
                  <span class="topAnchorSeparator">|</span> <a class="topAnchor" href="http://docusky.org.tw/DocuSky/docuTools/userMain/">我的資料庫</a>
                  </td>
               </tr>
            </tbody>
         </table>
      </div>
      <div style="padding:5px;">
         <table>
         <tbody>
            <tr><td colspan="2"><h1><a href='https://rise.mpiwg-berlin.mpg.de'><svg style="width:100px;color:#ff4e7b;margin-bottom:-1px;
               height:24px;margin-right:-7px" viewbox="0 0 684 178">
                 <use xlink:href="#rise-logo"></use>
                 </svg></a></h1><p>RISE Project—Research Infrastructure for the Study of Eurasia—is a digital research infrastructure developed by the Max Planck Institute for the History of Science.</p></td></tr>
            <tr>
                  <td colspan="2">
                  <select-collection v-model="selectedCollection" :collections="collections"></select-collection>
                  </td>
               </tr>
            <tr>
         </tbody>
         </table>
         <div id="pagination-filter" v-cloak>
            <div style="float:left;margin-right:10px">
               書名過濾: <input id="inputBookFilter" type="text" size="6" autocomplete="off" v-model="filter">
            </div>
            <div id="paginationContainer">
               <div class="pagination">
                  <ul>
                     <li v-if="pageCount > 1">
                        <button @click="prevPage" :disabled="currentPage === 1">&lt;</button>
                     </li>
                     <li v-if="pageCount > 1">
                        <button @click="nextPage" :disabled="currentPage >= pageCount">
                           &gt;
                        </a>
                     </li>
                  </ul>
                  <span style="color: #f00">{{currentPage}}</span> / {{pageCount}} pages, {{totalResources}} entries
               </div>
            </div>
         </div>
         <div style="clear:both"></div>
      <div style="overflow-x:hidden; overflow-y:scroll; height:280px; border:2px solid grey; border-radius:4px; margin:5px; box-shadow:5px 5px 5px #888888;">
         <div id="messageOverlay" style="position: absolute; top: 180px; left: 25%; width: 50%; border: 3px double grey; border-radius: 4px; padding: 18px; font-size: 125%; background-color: rgb(255, 255, 153); z-index: 100; text-align: center; display: none;">載入書名清單...</div>
            <table id="resourcesList" width="100%">
               <tbody>
                  <tr v-cloak v-for="resource in resources"><td v-bind='resource'><label><input type='checkbox' v-model="selectedResources" :id=resource.uuid :value=resource>{{resource.name}}</label></td></tr>
               </tbody>
            </table>
         </div>
         <div style="margin-left:10px; padding:3px;" v-cloak>
            <span>{{selectedResources.length}}</span> resources selected
            <span style="margin-left:10px">
               <span class="bookTitle" v-for="(resource, index) in selectedResources" :key='resource.id'>{{getCollectionName(resource.collectionUuid)}} > {{resource.name}}&nbsp;<button class="remove-button" @click="removeSelectedResource(index)">x</button></span>
            </span>
         </div>
         </div>
         <div class="contentArea">
            <!--
            <b>1. 先 <button id="downloadTexts" disabled="disabled">下載</button> ctext 文本
            <br/>
            -->
            <hr>
            <b>2. 將 DocuXml 儲存在本地硬碟</b><br>
         輸出的建庫檔名：<input type="text" id="outFilename" v-model="filename" placeholder="Export File Name" size="45" autocomplete="off">
            <button id="downloadAndSave" @click="buildJson" :disabled="selectedResourcesCount < 1">點我下載並儲存</button>
            <progress-bar :current='resourcesForExportCount' :goal='selectedResourcesCount'></progress-bar>
         </div>
         <br>
         <hr>
         <table width="100%" border="0">
            <tbody><tr id="transformers" class="tableRow">
               <td width="100%" class="toolType">
                  <b>3. 上載 DocuXml 檔案，以建構個人文字庫（需有 DocuSky 帳號）</b><br>
               </td>
            </tr>
            <tr>
               <td style="padding:10px">
                  <div>
                  <span id="manageDbList" class="butBuildDb">
                     點我建構或刪除文字庫
                  </span><span style="font-size:smaller">（檔案大小上限 100MB）</span>
                  </div>
               </td>
            </tr>
         </tbody>
      </table>
      </div>
   </div>
   </body>
</html>